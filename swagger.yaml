openapi: 3.0.1
info:
  title: Blyze
  description: This is the documentation for the backend API supporting Blyze Project.
  contact:
    email: rachitb@gatech.edu
  version: 0.1.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://localhost:8080
  description: Localhost
tags:
- name: user
  description: Endpoints related to user management
paths:
  /user:
    put:
      tags:
      - user
      security: []
      summary: Registers a user in the database
      operationId: register
      description: The user must not be already registered in the system. The user must provide at least 8-character password. The user must provide a valid email address. No field can exceed 128 characters.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        200:
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/UserAuthToken'
        400:
          description: Invalid email address supplied
          content: {}
        409:
          description: Email address already in use
          content: {}
        422:
          description: Input rules broken - check description
          content: {}
    post:
      tags:
      - user
      security: []
      summary: Logs in a user
      description: 'Exchanges username and password for a Bearer token. The user must already be registered. The provided combination of email address and password must be correct. No field can exceed 128 characters.'
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        200:
          description: User logged in successfully
          content: {}
        401:
          description: The provided combination of email address and password was invalid
          content: {}

components:
  schemas:
    User:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 128
          description: Username, as requested by the user
    UserLogin:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: Password of the user
          format: password
          minLength: 8
          maxLength: 128
    UserAuthToken:
      type: object
      required:
        - auth_token
      properties:
        auth_token:
          type: string
          description: Authentication token of the user
    UserArray:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          description: List of user objects
          items:
            $ref: '#/components/schemas/User'
    GroupID:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Internal ID of the group, as seen in the database
          format: int64
    Group:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          description: Internal ID of the group, as seen in the database
          format: int64
        name:
          type: string
          description: Short description of the group
          minLength: 3
          maxLength: 128
        default_duration:
          type: integer
          description: Default duration for the group's sessions
          format: int64
          minimum: 10
          maximum: 600
    GroupArray:
      type: object
      required:
        - name
      properties:
        groups:
          type: array
          description: An array of group objects
          items:
            $ref: '#/components/schemas/Group'

  securitySchemes:
    userAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - userAuth: []
